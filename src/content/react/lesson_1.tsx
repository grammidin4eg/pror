import React from 'react';
import {Divider} from "antd";
import '../content.css'

export const ReactLesson1: React.FC = () => (
    <div>
        <Divider orientation="left">Общие сведение о ReactJS</Divider>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/h9TwePYkJqE" title="YouTube video player"
                frameBorder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowFullScreen/>
        <Divider />
        <div className="content">
            <p>
                ReactJS — JavaScript-библиотека с открытым исходным кодом для разработки пользовательских интерфейсов.
            </p>
            <p>
                Библиотека может использоваться для разработки одностраничных веб-приложений и мобильных приложений.
                Его цель — предоставить высокую скорость, простоту и масштабируемость.
                React подразумевает компонентный подход и имеет быструю отрисовку за счет использования virtual dom.
            </p>
            <h3>Зачем использовать ReactJS?</h3>
            <ul>
                <li><b>Скорость отрисовки.</b> В крупном приложении часто происходит перерисовка компонентов,
                    что ведет за собой изменение DOM-дерева. Фреймворки оптимизируют перерисовку и обновление DOM-дерева.
                    Иначе вам рано или поздно придется делать это самостоятельно.
                </li>
                <li><b>Компонентный подход.</b> Веб-приложение строится из кирпичиков-компонентов. Это очень удобно.
                    Позволяет использовать повторно код, перемещать части приложения.
                    В фреймворках уже присутствует возможность создавать и использовать компоненты.
                    Иначе вам рано или поздно придется делать это самостоятельно.
                </li>
                <li> Наличие инструментов для <b>обеспечения реактивности</b>. Приложение должно реагировать на изменение данных.
                </li>
                <li> Наличие инструментов для раздельного <b>управления с данными</b> и отображением данных. Например, реализация mvc, mvvm шаблонов.
                </li>
                <li>Наличие готовых инструментов, упрощающих работу с отображением <b>шаблонов</b>.
                </li>
            </ul>
            <p>
                Один из основных принципов разработки: <b>Не повторяй себя.</b> Фреймворки содержат готовые решения проблем, с которыми вы почти наверняка столкнетесь, разрабатывая большое сложное веб-приложение.
            </p>
            <h3>Virtual dom</h3>
            <p>
                Cамая затратная операция при работе с веб-приложением - это обновление и перерисовка DOM дерева в браузере.
                Что предлагает React? Он строит в памяти виртуальную копию DOM-дерева. Именно с этой виртуальной копией производятся все
                манипуляции, что происходит намного быстрее. А потом происходит синхронизация или “согласование” виртуального дерева с
                DOM-деревом.  После того как все обновления были внесены в виртуальный DOM, алгоритм решает, какие конкретные изменения
                необходимо внести в исходный DOM. Такой подход существенно ускоряет работу веб-приложения.
            </p>
            <p>
                Кроме того, это делает API React декларативным: вы указываете, в каком состоянии должен находиться пользовательский
                интерфейс, а React добивается, чтобы DOM соответствовал этому состоянию.
                React постоянно дорабатывается, оптимизируются алгоритмы согласования.
                Итак, Virtual DOM — это паттерн, который реализуют ряд библиотек, которые позволяют нам улучшить производительность
                на клиентской стороне, избегая прямой работы с DOM-деревом.

            </p>
            <h3>Компоненты</h3>
            <p>
                React приложение складывается из компонентов, как дом из кирпичей. Компоненты позволяют разбить интерфейс на независимые части,
                про которые легко думать в отдельности. Их можно складывать вместе и использовать несколько раз.
            </p>
        </div>
    </div>
);
